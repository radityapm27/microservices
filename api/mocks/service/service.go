// Code generated by mockery 2.7.5. DO NOT EDIT.

package mocks

import (
	context "context"
	model "rpm/microservices/api/graph/model"

	mock "github.com/stretchr/testify/mock"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

// GetProductCatalog provides a mock function with given fields: ctx, obj
func (_m *Service) GetProductCatalog(ctx context.Context, obj *model.AbstractModel) (*model.Catalogs, error) {
	ret := _m.Called(ctx, obj)

	var r0 *model.Catalogs
	if rf, ok := ret.Get(0).(func(context.Context, *model.AbstractModel) *model.Catalogs); ok {
		r0 = rf(ctx, obj)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Catalogs)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *model.AbstractModel) error); ok {
		r1 = rf(ctx, obj)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetShoppingCartByUserID provides a mock function with given fields: ctx, userID
func (_m *Service) GetShoppingCartByUserID(ctx context.Context, userID string) (*model.Carts, error) {
	ret := _m.Called(ctx, userID)

	var r0 *model.Carts
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.Carts); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Carts)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserInfoByID provides a mock function with given fields: ctx, obj, userID
func (_m *Service) GetUserInfoByID(ctx context.Context, obj *model.AbstractModel, userID string) (*model.UserInfo, error) {
	ret := _m.Called(ctx, obj, userID)

	var r0 *model.UserInfo
	if rf, ok := ret.Get(0).(func(context.Context, *model.AbstractModel, string) *model.UserInfo); ok {
		r0 = rf(ctx, obj, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.UserInfo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *model.AbstractModel, string) error); ok {
		r1 = rf(ctx, obj, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListOfUser provides a mock function with given fields: ctx, obj
func (_m *Service) ListOfUser(ctx context.Context, obj *model.AbstractModel) (*model.ListUser, error) {
	ret := _m.Called(ctx, obj)

	var r0 *model.ListUser
	if rf, ok := ret.Get(0).(func(context.Context, *model.AbstractModel) *model.ListUser); ok {
		r0 = rf(ctx, obj)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.ListUser)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *model.AbstractModel) error); ok {
		r1 = rf(ctx, obj)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
