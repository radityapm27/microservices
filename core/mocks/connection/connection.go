// Code generated by mockery 2.7.5. DO NOT EDIT.

package mocks

import (
	sqlx "github.com/jmoiron/sqlx"
	mock "github.com/stretchr/testify/mock"
)

// Connection is an autogenerated mock type for the Connection type
type Connection struct {
	mock.Mock
}

// ExecuteDBQuery provides a mock function with given fields: qapi
func (_m *Connection) ExecuteDBQuery(qapi string) ([][]string, error) {
	ret := _m.Called(qapi)

	var r0 [][]string
	if rf, ok := ret.Get(0).(func(string) [][]string); ok {
		r0 = rf(qapi)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([][]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(qapi)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExecuteElasticQuery provides a mock function with given fields: qapi
func (_m *Connection) ExecuteElasticQuery(qapi string) ([][]string, error) {
	ret := _m.Called(qapi)

	var r0 [][]string
	if rf, ok := ret.Get(0).(func(string) [][]string); ok {
		r0 = rf(qapi)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([][]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(qapi)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDb provides a mock function with given fields:
func (_m *Connection) GetDb() *sqlx.DB {
	ret := _m.Called()

	var r0 *sqlx.DB
	if rf, ok := ret.Get(0).(func() *sqlx.DB); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sqlx.DB)
		}
	}

	return r0
}

// SetResponse provides a mock function with given fields: in
func (_m *Connection) SetResponse(in [][]string) {
	_m.Called(in)
}
