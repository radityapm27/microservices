// Code generated by mockery 2.7.5. DO NOT EDIT.

package mocks

import (
	go_micro_srv_core "rpm/microservices/core/proto"

	mock "github.com/stretchr/testify/mock"
)

// AbstractRepository is an autogenerated mock type for the AbstractRepository type
type AbstractRepository struct {
	mock.Mock
}

// GetUserInfoByID provides a mock function with given fields: userID
func (_m *AbstractRepository) GetUserInfoByID(userID string) (*go_micro_srv_core.UserInfoResponse, error) {
	ret := _m.Called(userID)

	var r0 *go_micro_srv_core.UserInfoResponse
	if rf, ok := ret.Get(0).(func(string) *go_micro_srv_core.UserInfoResponse); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*go_micro_srv_core.UserInfoResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListOfUser provides a mock function with given fields:
func (_m *AbstractRepository) ListOfUser() (*go_micro_srv_core.ListUserResponse, error) {
	ret := _m.Called()

	var r0 *go_micro_srv_core.ListUserResponse
	if rf, ok := ret.Get(0).(func() *go_micro_srv_core.ListUserResponse); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*go_micro_srv_core.ListUserResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
